
Things that I need to do

[x] A sign up page, will be similar to login
[x] Have all pages inherit from one base page
[x] Move the jwt template into create react app
[x] Create consistency in the imports
[x] Move the project to create-react-app boiler plate

DO THIS
END GOAL -> landing page, sign up, log in, and a private view
[x] when dev tools is opened, site disappears, wut => had to do with the Responsive component
[x] mave alerts to under the nave bar and style it
[x] add in some validation when the forms are submitted => highlight uncompleted fields
[x] fix up react router configuration, alert action is going crazy
--alert still called twice on some pages
[x] add value attributes to the form inputs
[x] Add a 404 page for routes that don't exists

============================================================================================

BIGGER PROBLEMS THAT REQUIRE MORE THOUGHT
1. Auth for users and THEN assigning permissions for site usage - hella annoying
2. This app does not use react-router-dom's router, look into the history's docs

Problems
Landing page calls alert twice, sign up only once, weird

login flow
login request -> success -> alert clear -> get users -> get users success
logout flow
alert clear -> users logout

why does children have to be wrapped in an object to be passed to a component?
({children}) => component()

-imports and exports, get it done

I'm starting to see how keeping the index.js file in the dir makes imports easier
doing an export default will return that one thing
when it is imported, it can be named to anything, hmm.. this leaves room for error, should be stricter
so doing the index.js to export things and using export { this as that } on import must do { item } from <directory>, pretty cool

think I just found out about object destructuring with { field1, field2, .. } = object


Observations:
-form wants all fields before it hits the backend
--how would things change on forms with fields are are not required, hmm...
-added actions for sign up, wanted a spinner on the submit button in the signup form
-looking at control flow is fascinating, first dispatching a request -> success / failure and then dispatching more actions

Things to keep in mind
-Good commit history
-Readme file
-File structure
-Documentation
-Code consistency
-Attribute other people's code
-Tests

